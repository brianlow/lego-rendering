import os
import sys
import random

# This script runs under Blender's python environment. Add the current
# directly to the path so we can import our own modules
dir_path = os.path.dirname(os.path.realpath(__file__))
print(f"Prepending {dir_path} to Python path...")
sys.path.insert(0, dir_path)

from lib.image_utils import grid, get_default_font
from lib.renderer.renderer import Renderer
from lib.renderer.render_options import RenderOptions, Quality, LightingStyle, Material
from lib.colors import RebrickableColors, RebrickableColorsById


dataset_name ="lego-detect-12-4k-new-rendering"

# Basic colors that we've been testing with
color_ids = [0,1,10,1050,14,15,158,182,19,191,2,212,226,25,26,27,272,28,288,29,3,30,308,31,320,321,322,323,326,378,4,41,46,47,484,5,70,71,72,73,84,85]

# 1000 most popular parts (ldraw ids)
# Ideally we'd only generate real part+color combinations
# SQL query:
#     select
#         group_concat('''' || ldraw_id || '''') as ldraw_ids,
#         group_concat(num_set_parts) as weights
#     from (
#         select ldraw_id, num_set_parts
#         from canonical_part_info
#         where not year_to < 1970  -- too old for my collection
#         and not (name like '%string%' or name like '%chain%') -- can't render strings and chains
#         and not (ldraw_id is null)
#         and not (part_category_name in ('Duplo, Quatro and Primo', 'Stickers', 'Non-LEGO', 'Non-Buildable Figures (Duplo, Fabuland, etc)', 'Clikits'))
#         order by num_set_parts desc
#         limit 1000
#     ) x;
#
# Removed: 7049a (failed on bounding box)
ldraw_ids = ['3023','6141','93792','3024','2780','30071','3003','3710','3001','98138','54200','3069a','3010','3020','94148','3070a','3021','15573','3666','2412a','42924','3062b','3623','2431','45505','3068a','3040a','3009','3002','3795','25269','63325','4274','43093','32062','85984','3039','4070','4589','3460','6636','6590','4032a','3660b','11477','3665b','32123a','3034','6143','12825','3700','2357','4519','87079','85861','15068','87580','87087','4085a','4162','3008','3673','2877','63864','32054','6091','32028','30136','24866','4477','2654a','44728','3749','6536','99780','3705','4286','99207','6019','3031','59443','32064c','98283','44237','4865a','6541','2540','11211','3065','3032','60478','3037','50950','3832','48336','3701','32013','35480','3298','63868','4740','22885','99206','30414','92280','30374','33291','32523','32073','32316','3245a','32140','3711','32000','20482','4081b','61409','2454a','6632','53451','3937','99781','3035','3706','93273','41677','48729a','3007','32524','15672','33909','62462','96910','3747a','3063b','2429c01','3873','32002','2432','61678','73587p01','32526','18654','4864a','3957a','32039','42003','4599a','6014','2445','60483','2436a','32952','4287a','32607','3742','6015','60470a','2450','6587','32034','3894','24246','11214','3641','10247','64871','87994','57518','27925','64289','3297','14769','3709b','92593','60479','4624','60592','32184','26603','49673','3702','44302a','26601','32525','24201','4265a','60601','3036','3659','18674','43722','3958','41770','60481','4282','43723','41769','53989','64644','87083','6231','60474','32556','6134','49307','60475a','3703','4460b','11090','15207','11476','63965a','6628','3707','2458','2453a','26047','577a','28192','15100','41740','3680','3030','11458','6538a','14719','30153','10928','6111','3139','47457','15571','3176','3829c01','3045','30377','3938','30357','3633','32828','32449','30565','11212','34103','51739','32016','44294','18651','2449','3684a','28809','92903','3679','4185b','3895','3678a','30237','3033','32174','44301a','36840','6589','3029','22388','15535','6112','2362a','88072','14704','41239','30367b','4215a','3062a','6232','32803','23443','3483','4600','32270','2465','29120','27263','87620','55981','43127','2423','4733','3737','30179','4495a','14716','2921','92538','4216','3708','26604','30503','29119','92947','6126a','11203','6553','87747','6215','32009','3455','3038','3854','35787','30137','93274','32056','4510','36841','37762','2460','2825','2817','32209','2730','3028','32291','54383','6179','60477','61184','14395','3839a','54384','4488','3738','24309','37352','47905','22385','93606','2447','33183','28621','58176','15070','14417','48092','4697a','4871','3831','3830','3185','30363','2476a','32014','52107','924','6629','12939','6264','32530','88646','64647','3741a','32015','44567a','4490','15392','42022','32018','21459','43857','30028','41669','3648a','60484','4175','482','59350','30383','61068','3942a','42610','3651','11002','30027a','30236','2417','60593','2653','24316','47455','63869','2736','32001','11055','41678','48989','22961','50745','14418','15470','43898','13965','24299','30602','32348','69729','32124','42534','41682','44874','42023','88292','6269','24307','27507','4150','32271','13547','50340','18653','6180','96874','3743','3482','50951','11478','54087','98138p07','28974a','43888','32017','11215','60602','3081ac01','30350a','15462','4349','30000','30162','6081','91988','73825','23969','2569','60594','4623','20310','35394','44676','32063','30176','481','4460a','55013','32474','33299a','75535','18980','2496','2462','3856','30145','18575','6106','26287','19220','3027','18671','6003','13548','92438','3046','4019','13971','16577','47456','18649','6266','32138','497c01','32606','2446','4727','4276a','3823','35464','2905','30365','15533','4275a','15208','30165','3956','4485','60803','3299','6182','40379','48183','85970','4497','4218b','4735','11253','3853','52901','60485','30157','30044','94925','4532','15706','4862','22888','15303','25214','32250','6249','87081','47398','41879a','4083','4445','6248','30031','47397','4728','u9131','u8100','89678','98100','60476','78258','11213','57910','10190','4590','73230','4345a','55982','10197','50304','87609','32072','37775','36752a','52501','11609','3069bpw2','30526','22667','3228a','50305','4315','92582','2850b','11833','58090','30648','2851','3676','2852','3300','30391','3137c01','43719','89522','4006','11610','64782','15395','3005pe1','75937','93095','34337','3581','64179','2959c01','6222','4346','15403','2639','3901','33243','4143','3005pe4','92946','3626ap01','41532','30099','3464','30554a','32532b','47458','16091','4859','64799','92402','2853','3675','61485','65578','3229a','3230a','98282','3959','3788','32059','4273a','41748','52031','14419','46361','4595','6020','45590','79389','3822','45677','33078','53585','65509','33320','58247','3041','6060','3821','32557','15458','6564','6575b','15332','3044a','17485','51011','78329','30386','41747','44568','24855','30285','92690','57909','2655','2815','32065','61482','6565','67329','2489','93609','60616a','98138pz0','32531b','37695','2926','3837','86996','22890','6087','44375b','4533','3649','85543-f5','92907','43710','13349','4213','30055','18646','99773','3049a','3849','4176','99021','25893a','30364','6259','4084','2530','27261','90195','4132','4716','30385','30517','50254','70501a','70501a','70501a','23950','3650a','2479','15400','43711','4476','4095','3475b','3043','4449-f2','85943','99008','16770','30355','15456','51719','55236','95344','11208','3685','122c01','91405','10314','11946','4625','2340','30356','11947','30046','3456','27940','3626bp01','15461','26597','18041','4588','44126','2346','48169','48171','90258','60583a','273','60208','6187','30150','93160','24375','35044','6191','11618','39739','4151a','62361','6140','4854','64727','10884','32249','11127','11209','30504','2486','41854','6583','4536','57878','4531','64225','61780','14718','30586','4738a','10202','60219','61254','22886','3900','2529','43713','62810','2413','2536a','32126','35459','90617','3847','24122','62113','2739a','62623','2744','13564','3613','64648','6041','u151','3614a','90609','92099','3582','60032','85975','91501','72504','88293','18853','66792','4161','98585','14707','55615','60176','93061','44570','44809','22484','3612','60212','30151a','47753','4528','u8101','41531','50943','374','71917','2854','50861','57585','90641','98139','4522','61345','42445','87618','15209','18977','18759','2566','53454','6183','2577','30132','33172','41767','63082','90640','15391','44300','54821','3943b','4033','40378','50862','32555','33051','35243','6192','78666','85544','59230','6254','4515','61072','3634','2920','3624','86210','32324','14137','92738','15210','33085','41768','48170','73590a','43712','4870','50923','2377','30089a','19119','93575','98138p0a','30395','32211','2542','6239','78256','14720','3940','72454','30340','61903','4133','74261','60623','68013','68568','98834','21445','3836','6064','90398','85941','3184','33303','39789','6233','22889','38320','3861c','92851','73587p03','4022','79756','64448','32200','3833','6148','98721','32529','32187','6256','30043','30540','3934','88393','30093','458c01','28870','47847','93594','41862','53400','93555','3067a','11303','28326','3835','47296','92220','44674','92692','95188','18976','33286','2878c01','3070bp07','47755','4285b','30359b','4166a','18946','95228','4489a','90540','4863','30387','30361a','4034','87617','56890','43892','90639','15397','3963','85546','95199','245c01','3855a','44309','24482','30592','82359','62531','15279','52211','3712c03','3852a','26599','3149ec01','40243','15092','3848','453ac01','45575','87990','56891','4360','50898','98286','32198','3066','32235','4166b','2421','87989','30375','30505','3731','44224','57520','62743','2508','32068','73109','2452','2562']
weights = [109500,105678,90037,81903,69961,66593,59637,49185,47114,46711,43072,42582,41270,40676,37479,33184,29926,28421,28230,27011,26618,26159,25733,22555,21880,21784,21156,21077,20038,19906,19759,19666,18693,17789,17230,15522,15454,15316,15243,15201,14880,14764,14431,14213,13756,13103,12937,12821,12702,12635,12562,12302,11884,11816,11332,11206,11154,10461,10341,10261,10257,9303,9278,9211,9087,9058,8842,8800,8530,8131,8099,8019,7668,7468,7439,7416,7325,7208,6977,6960,6933,6859,6776,6538,6477,6464,6445,6387,6382,6345,6177,6101,5928,5872,5802,5749,5627,5531,5470,5396,5377,5352,5251,5222,5163,5138,5073,5039,4988,4981,4968,4944,4886,4856,4763,4754,4710,4649,4648,4642,4636,4587,4545,4499,4393,4384,4274,4266,4265,4177,4158,4155,4137,4074,4060,4058,4037,3975,3950,3949,3947,3934,3890,3875,3848,3837,3827,3827,3801,3726,3691,3660,3632,3580,3579,3574,3571,3496,3396,3395,3378,3368,3350,3340,3298,3288,3266,3263,3254,3248,3229,3192,3170,3131,3102,3086,3078,3060,3054,3026,3026,2980,2977,2971,2935,2900,2895,2893,2892,2878,2876,2844,2807,2801,2794,2791,2788,2787,2717,2685,2676,2674,2667,2666,2666,2664,2643,2630,2629,2617,2608,2600,2600,2589,2581,2573,2537,2535,2534,2534,2519,2494,2450,2432,2407,2405,2385,2383,2369,2340,2338,2314,2312,2312,2308,2307,2280,2256,2238,2231,2230,2219,2214,2203,2203,2194,2193,2178,2168,2153,2125,2074,2041,2035,2029,2024,2023,2013,2000,1990,1971,1968,1968,1958,1952,1945,1945,1937,1936,1934,1933,1929,1925,1893,1891,1879,1861,1860,1858,1852,1843,1831,1825,1824,1818,1805,1802,1796,1794,1788,1788,1787,1785,1781,1762,1761,1760,1759,1745,1726,1725,1712,1704,1704,1697,1691,1686,1680,1678,1662,1652,1588,1585,1582,1579,1569,1568,1565,1551,1547,1545,1538,1538,1536,1536,1534,1512,1508,1508,1501,1491,1489,1479,1472,1468,1467,1458,1452,1451,1441,1440,1394,1388,1379,1378,1376,1375,1370,1362,1359,1351,1349,1348,1341,1340,1332,1331,1327,1327,1325,1320,1309,1309,1307,1306,1300,1290,1285,1284,1280,1279,1274,1274,1272,1271,1271,1270,1270,1267,1254,1241,1240,1238,1223,1221,1213,1207,1202,1186,1177,1173,1165,1161,1161,1154,1148,1148,1146,1137,1136,1130,1128,1125,1125,1123,1121,1117,1116,1115,1113,1112,1111,1109,1108,1107,1101,1087,1084,1083,1074,1070,1066,1064,1064,1059,1059,1054,1046,1039,1033,1028,1003,1001,995,991,990,988,987,980,980,977,973,972,968,967,960,955,928,923,921,912,910,900,898,898,897,891,891,882,882,878,875,875,872,868,862,852,852,851,846,841,838,838,837,828,825,822,821,821,817,816,816,812,808,805,802,802,799,798,796,796,786,780,778,775,774,772,759,757,751,741,739,737,735,734,734,732,727,725,724,719,719,715,714,712,707,702,692,691,690,686,686,685,681,681,678,677,676,676,674,673,668,667,663,660,658,656,655,652,652,647,647,646,645,641,639,639,636,636,636,633,632,631,629,627,619,615,615,613,611,607,604,601,598,598,593,590,589,589,588,586,586,583,580,578,578,578,576,572,568,568,564,561,561,560,557,555,554,550,549,547,546,546,543,541,541,541,540,540,540,540,537,537,537,535,534,533,532,531,531,528,527,526,524,523,523,521,521,519,519,519,518,518,517,516,514,513,511,511,510,509,508,507,507,507,506,506,506,505,504,504,503,502,502,500,499,499,499,498,496,495,494,493,493,490,490,490,486,486,485,484,482,480,478,477,477,475,474,473,472,470,469,469,469,468,468,466,465,463,463,463,462,462,461,460,460,459,459,459,456,453,452,451,451,450,449,448,443,443,441,441,440,440,439,438,438,438,437,436,434,434,433,431,431,430,430,429,429,426,422,422,420,419,417,416,415,414,414,414,413,412,409,409,408,403,403,401,399,398,396,396,396,396,395,393,393,391,391,387,387,387,386,385,385,384,384,383,383,382,380,380,380,379,379,378,377,377,376,376,374,370,369,369,368,368,367,366,365,364,364,362,360,360,360,358,357,357,355,355,354,354,354,353,352,350,349,348,345,345,344,344,344,344,343,343,342,342,342,341,340,339,338,337,336,335,335,334,333,333,333,333,332,332,331,331,330,330,330,330,330,330,327,327,327,327,327,326,325,325,325,324,323,323,323,322,322,321,321,321,321,320,320,319,313,312,312,311,311,310,309,309,307,307,307,307,307,306,306,306,305,305,304,304,304,303,302,301,300,298,297,297,297,296,295,293,293,292,291,291,291,290,289,289,288,287,286,285,285,285,284,284,284,284,283,283,283,282,281,280,280,278,276,275,275,274,273,273,272,270,270,269,269,269,268,268,267,264,263,263,263,263,263,262,262,262,261,260,259,259,259,258,257,257,256,256,253,253,252,251,250,250,250,248,248,248,247,246,246,246,246,245,245,244,244,244,244,243,243,243,242,241,240,240,239,238,238,238,237,236,235,233,233,232,231,231,231,230,230,229,229,228,228,228,228,227,227,227,226,225]

# Number of images to generate
num_images = 4000

# Percentage of images to assign to the validation set. The remaining for training.
# Setting this to 0 when experimenting makes it easier to review the results
percent_val = 0.2

# Draft (1s per image on M1 Pro Mac) or Normal (10s per image on M1 Pro Mac)
quality = Quality.NORMAL

train_path = f"./renders/{dataset_name}/train"
val_path = f"./renders/{dataset_name}/val"
dataset_path = "./renders/dataset"
dataset_yaml_path = f"./renders/{dataset_name}.yaml"

os.makedirs(train_path, exist_ok=True)
os.makedirs(os.path.join(train_path, "images"), exist_ok=True)
os.makedirs(os.path.join(train_path, "labels"), exist_ok=True)
os.makedirs(val_path, exist_ok=True)
os.makedirs(os.path.join(val_path, "images"), exist_ok=True)
os.makedirs(os.path.join(val_path, "labels"), exist_ok=True)

renderer = Renderer(ldraw_path="./ldraw")

# Check colors and parts
for color_id in color_ids:
  if color_id not in RebrickableColorsById:
    raise ValueError(f"Color {color_id} does not exist")
for ldraw_id in ldraw_ids:
  filename = f"./ldraw/parts/{ldraw_id}.dat"
  if not os.path.isfile(filename):
    raise ValueError(f"File {filename} does not exist")

# Generate images
for i in range(num_images):
    color_id = random.choice(color_ids)
    color = RebrickableColorsById[color_id]
    ldraw_id = random.choices(ldraw_ids, weights=weights)[0]

    output_path = val_path if random.random() <= percent_val else train_path
    image_filename = os.path.join(output_path, "images", f"{color_id}_{ldraw_id}_{i}.png")
    label_filename = os.path.join(output_path, "labels", f"{color_id}_{ldraw_id}_{i}.txt")

    options = RenderOptions(
        image_filename = image_filename,
        bounding_box_filename = label_filename,
        quality = quality,
        lighting_style = random.choices([LightingStyle.DEFAULT, LightingStyle.HARD], [72, 25])[0],
        light_angle = random.uniform(0, 360),
        part_color = color.best_hex,
        material = Material.TRANSPARENT if color.is_transparent else Material.PLASTIC,
        part_rotation=(random.uniform(0, 360), random.uniform(0, 360), random.uniform(0, 360)),
        camera_height=random.uniform(15, 90),
        render_width=244,
        render_height=244,
        zoom=0.1,
    )

    renderer.render_part(ldraw_id, options)

    # print percentage complete as 0-100% with no decimal places
    print(f"{i / num_images * 100:.0f}% complete...")
