import os
import sys
import random

# This script runs under Blender's python environment. Add the current
# directly to the path so we can import our own modules
dir_path = os.path.dirname(os.path.realpath(__file__))
print(f"Prepending {dir_path} to Python path...")
sys.path.insert(0, dir_path)

from lib.image_utils import grid, get_default_font
from lib.renderer.renderer import Renderer
from lib.renderer.render_options import RenderOptions, Quality, LightingStyle, Look
from lib.colors import RebrickableColors, RebrickableColorsById


dataset_name ="lego-color-common-5k-trans-real"

# colors we have real photos for in lego-color (42 colors)
# color_ids = [0,1,2,3,4,5,10,14,15,19,25,26,27,28,29,30,31,41,46,47,70,71,72,73,84,85,158,182,191,212,226,272,288,308,320,321,322,323,326,378,484,1050,]
# just re-render transparent colors
color_ids = [41,46,47,182]

# 1000 most popular parts (ldraw ids)
# Ideally we'd only generate real part+color combinations
part_nums = ["28653","4073","3004","3024","3003","3005","98138","54200","2780","3710","3022","3020","3069a","3001","3010","2412a","3713","3021","3070a","3040a","30068","3623","43093","3666","2431","31460","3622","3749","3009","44728","4274","6558","3002","6091","3795","3794a","3068a","2654a","2420","3704","2357","4589","6536","2555","25269","85861","87580","4085a","3673","6636","3039","3460","3941","85984","32054","3011","4162","3665a","30136","3660b","60601","3065","32028","4032a","4081b","3031","2456","3034","32123a","11477","4519","3008","87079","32013","32064a","3700","2540","32140","63965a","4477","53451","6632","30374","2877","87087","15068","61252","63868","48729a","41677","32524","60483","59443","87994","4740","63864","32316","32525","32523","42003","3007","2429c01","3705","32034","4286","60470a","33291","24866","6541","40490","62462","32073","3032","3037","3298","99780","20482","99207","32184","32278","61409","3832","6587","98283","3701","30414","32000","2449","30069","2450","60592","4185","48336","11211","50950","60478","32039","3063b","53989","3641","14704","3659","57518","32526","30153","32449","4864a","35480","99206","11090","87083","22885","2436a","4175","11476","23306","32016","92280","4282","24246","32002","6629","3035","3706","30179","2445","3036","3711","3937","3006","4490","99781","3297","3678","30377","6134","3030","61678","3245a","55981","93273","6628","2432","33909","60475a","6232","15672","41239","6231","2454","14417","4216","3873","96910","3830","18677","64647","3045","44294","3894","18654","30565","4592c01","87747","88072","32009","3633","6005","3483","3958","49668","32952","3679","2458","41769","32607","6015","2444","30413","43722","41770","6589","43723","2423","44302a","2476a","4624","14769","30237","60479","27925","14418","2921","6111","32291","11214","32192","2496","30383","2825","32056","6538a","152","93274","6014","98138p07","57895","3709b","3033","4599a","3702","92593","26603","3957a","23443","3747a","60481","61184","26601","32014","4460b","51739","2302","24201","3176","2447","40666","92947","31000","3038","18674","32348","3029","58176","2465","32015","22388","3703","48092","4215a","30357","64644","4488","32556","60474","47457","49307","3741a","3854","2569","3938","30028","3707","28192","3028","30176","3647","2453a","4733","22385","41740","26047","3680","15100","3651","3895","2417","43719","2362a","4218b","3048a","150","11458","6060","2343","14719","6553","32828","60484","6180","4495a","63869","4859","3139","3684a","36841","32017","6112","4871","4590","61482","32174","6179","34103","30503","32270","11212","40379","4066a","18651","44301a","22667","2339","3185","32124","2736","59349","88646","3829c01","11478","32063","6003","87620","3708","2419","32532","60602","96874","4019","2460","4510","36840","30137","6215","15535","6266","27263","4276a","32250","3455","2852","6249","12939","23969","32803","3737","42023","4600","3831","30162","3956","29120","14716","3308a","30367b","43857","11203","33183","2730","30602","4315","3738","43898","54383","32474","60477","30363","29119","26604","88930","3676","56145","15470","54384","30350a","4588","41669","30000","2462","2335","4735","35787","41762","30044","2905","6182","47905","3839b","3823","3482","4006","60594","30648","2817","14419","30236","37762","6259","3027","32209","48183","4595","3046","93606","32018","24309","47456","47455","37352","22890","32269","85543","2723","60593","52107","15070","15303","44676","3743","50745","6081","93609","32530","6510","41539","44567a","15392","4275a","2653","4697a","6564","3822","2340","60476","33078","32001","88292","3960","37775","6565","32072","42610","6157","30553","43888","51011","58367","4533","30365","2851","92582","30391","24316","4150","30027a","41678","2446","13965","89522","76384","47458","30165","11833","44874","30145","69729","48989","32249","4862","11609","27507","22961","2530","30099","24299","4143","3853","24307","30157","18653","13547","41682","4287","21459","4625","60169","3581","86210","3856","30562","60471","2853","42446","3648a","50951","33243","4623","4345a","4083","4346","4349","3685","11215","58090","98282","30046","32065","6248","6148","24855","4854","6183","15462","44568","2815","3626a","91988","3299","98138pz0","6140","11253","73825","40378","92690","20310","92338-f1","50304","30385","92907","3041","30055","2489","99773","13548","3649","22484","99021","4445","6106","85970","2566","50305","43710","3300","85943","50254","18980","4532","33320","33299a","15400","92438","55013","93095","11947","6087","30132","2926","61903","30093","2744","41531","4095","74261","10199","51719","15533","15456","26287","41748","3959","71917","16770","6187","43711","47397","11946","64782","30239","90195","18671","92851","60212","3821","32126","95344","56902","4739","64727","45677","32059","32294","18649","32555","32138","30395","32606","4727","60583a","3855b","572c02","6583","90258","6020","3043","35464","50862","4022","48171","93061","52501","4497","41747","15208","47398","2437","48169","4728","25214","4536","3184","90641","52031","4738b","6575a","17485","3849","6233","11127","2639","2854","2486","4449-f1","22888","60485","15706","6222","55982","94925","4531","55236","572c01","2711","72504","57910","30249","374","53540","30364","2300","25893a","3943b","87081","3675","62361","30592","4716","4199","98100","4855","11213","30031","4515","32173","3865","89678","15395","18626","87609","10314","98139","50861","90398","78258","85975","3788","25375-f1","30337","4213","73230","63082","30663","14707","57520","3464","4263","10197","90640","2577","31511","91501","4176","3069bpw2","4261","3475b","2421","43712","4262","60032","3837","33172","4285b","98138p0a","50923","31001","6474","41854","2561","92738","85544","2435","15210","44674","11610","64225","32200","48170","59275a","34337","2739a","2959c01","64179","43713","3634","30043","53585","19119","15403","13564","47753","15458","30504","3005pe4","2542","92946","75937","41750","4499","2878","32235","30356","85941","2850a","6239","41532","30292a","6064","88293","44661","4217","92402","64799","60208","61485","33051","3044a","30386","41767","32557","3005pe1","6191","41749","4288","6124","4132","2655","3456","45590","93555","65509","58247","2508","15279","30285","95228","79389","53401","46667","15332","44809","78329","65578","32198","2439","2488","76537","24122","30517","56890","41768","31110","90639","3049c","30355","91405","37695","32531a","32324","2529","44126","3066","6041","50943","86996","85545","3471","11208","44570","27261","2301","32187","6254","18976","85940","15092","2479","18646","85546","4229","6378","2695","87617","2527","11291","62531","30586","98137","6070","61345","32293","4196","4870","44375a","4161","32019","23950","6256","4035","42445","3479","57539","33121","99008","2346","30359b","32333","30361a","48933","4332","39739","53119","6118","4033","30407","30150","24482","98138p0n","95188","3861c","2341","27940","15461","4273a","4133","26597","87693","2214","4598","3069bp01","88704","67329","47759","6178","61649","44300","30540","30134","87421","3900","71923","44225","30029","24375","35044","98138p0c","64867","32199","2819","50947","44524","92099","293","47755","93160","47720","11618","4202","11209","64276","15362","90540","57894","57878","53586","32068","2570","2994","61780","90609","14718","61254","18948","15064","64448","22886","10202","3963","62113","2413","15209","98223","90617","30115","2571","98138p0b","32210","54821","2433","73590a","47847","64648","6292","54661","2584","2470","30169","45301","32083","2494","24116"]

# Number of images to generate
num_images = 250

# Percentage of images to assign to the validation set. The remaining for training.
# Setting this to 0 when experimenting makes it easier to review the results
percent_val = 0.2

# Draft (1s per image on M1 Pro Mac) or Normal (10s per image on M1 Pro Mac)
quality = Quality.NORMAL

train_path = f"./renders/{dataset_name}/train"
val_path = f"./renders/{dataset_name}/val"

os.makedirs(train_path, exist_ok=True)
os.makedirs(val_path, exist_ok=True)

renderer = Renderer(ldraw_path="./ldraw")

# Check colors and parts
for color_id in color_ids:
  if color_id not in RebrickableColorsById:
    raise ValueError(f"Color {color_id} does not exist")
for part_num in part_nums:
  filename = f"./ldraw/parts/{part_num}.dat"
  if not os.path.isfile(filename):
    raise ValueError(f"File {filename} does not exist")


for i in range(num_images):
    color_id = random.choice(color_ids)
    color = RebrickableColorsById[color_id]
    part_num = random.choice(part_nums)

    output_path = val_path if random.random() <= percent_val else train_path
    image_filename = os.path.join(output_path, str(color_id), f"{color_id}_{part_num}_{i}.png")

    options = RenderOptions(
        image_filename = image_filename,
        quality = quality,
        lighting_style = random.choices([LightingStyle.DEFAULT, LightingStyle.HARD], [72, 25])[0],
        light_angle = random.uniform(0, 360),
        part_color = color.blender,
        part_transparent = color.is_transparent,
        part_rotation=(random.uniform(0, 360), random.uniform(0, 360), random.uniform(0, 360)),
        camera_height=random.uniform(15, 90),
        width=244,
        height=244,
    )

    renderer.render_part(part_num, options)

    # print percentage complete as 0-100% with no decimal places
    print(f"{i / num_images * 100:.0f}% complete...")
